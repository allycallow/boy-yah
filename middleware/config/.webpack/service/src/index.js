!function(e,n){for(var t in n)e[t]=n[t]}(exports,function(e){var n={};function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}return t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(i,r,function(n){return e[n]}.bind(null,r));return i},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=7)}([function(e,n){e.exports=require("apollo-server")},function(e,n){e.exports=require("apollo-server-express")},function(e,n){e.exports=require("express")},function(e,n){e.exports=require("graphql-playground-middleware-express")},function(e,n){e.exports=require("serverless-http")},function(e,n,t){var i={kind:"Document",definitions:[{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"test"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"Test"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Mutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"store_blood_pressure"},arguments:[{kind:"InputValueDefinition",name:{kind:"Name",value:"value"},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]}],type:{kind:"NamedType",name:{kind:"Name",value:"BloodPressureRespone"}},directives:[]}]}],loc:{start:0,end:184}};i.loc.source={body:'#import "./type/test.graphql"\n#import "./type/blood-pressure-response.graphql"\n\ntype Query {\n  test: Test\n}\n\ntype Mutation {\n  store_blood_pressure(value: Int): BloodPressureRespone\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var r={};function o(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!r[n]&&(r[n]=!0,!0)}))}i.definitions=i.definitions.concat(o(t(6).definitions)),i.definitions=i.definitions.concat(o(t(8).definitions)),e.exports=i},function(e,n){var t={kind:"Document",definitions:[{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Test"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"ok"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]}]}],loc:{start:0,end:29}};t.loc.source={body:"type Test {\n  ok: Boolean!\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};e.exports=t},function(e,n,t){"use strict";t.r(n);var i=t(0),r=t(1),o=t(2),a=t.n(o),s=t(3),u=t.n(s),d=t(4),l=t.n(d);var c={Query:{test:async()=>({ok:!0})}},p=t(5),f=t.n(p);t.d(n,"handler",(function(){return k}));const m=a()(),v=Object(i.makeExecutableSchema)({typeDefs:f.a,resolvers:c}),y=new r.ApolloServer({schema:v,context:({req:e})=>{const{headers:{authorization:n}}=e;return{token:n}},resolverValidationOptions:{requireResolversForResolveType:!1},inheritResolversFromInterfaces:!0,mocks:!0});Object(i.addResolveFunctionsToSchema)({schema:v,resolvers:c}),Object(i.addMockFunctionsToSchema)({schema:v,preserveResolvers:!0}),m.use("/graphql",(e,n,t)=>{n.header("Access-Control-Allow-Origin","*"),n.header("Access-Control-Allow-Headers","Content-Type, Authorization, Content-Length, X-Requested-With"),"OPTIONS"===e.method?n.sendStatus(200):t()}),y.applyMiddleware({app:m}),m.use("/playground",u()({endpoint:"/graphql"}));const k=l()(m)},function(e,n){var t={kind:"Document",definitions:[{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"BloodPressureRespone"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"ok"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]}]}],loc:{start:0,end:45}};t.loc.source={body:"type BloodPressureRespone {\n  ok: Boolean!\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};e.exports=t}]));